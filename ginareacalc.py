# -*- coding: utf-8 -*-
"""GinareaCalc

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gNWlut5rRbj3Ds3y5eABfaTC6QAO_FRl
"""

import streamlit as st
import pandas as pd
import numpy as np

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä DCA",
    page_icon="üìà",
    layout="wide"
)

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–•: –ë–ò–†–ñ–ò –ò –ú–û–ù–ï–¢–´ ---
PRESETS = {
    "Binance": {
        "BTC": {"min_grid_step": 0.2, "min_order_size": 10.0},
        "ETH": {"min_grid_step": 0.25, "min_order_size": 10.0},
        "BNB": {"min_grid_step": 0.3, "min_order_size": 5.0},
        "SOL": {"min_grid_step": 0.5, "min_order_size": 5.0},
    },
    "Bybit": {
        "BTC": {"min_grid_step": 0.2, "min_order_size": 5.0},
        "ETH": {"min_grid_step": 0.25, "min_order_size": 5.0},
        "SOL": {"min_grid_step": 0.5, "min_order_size": 2.0},
        "XRP": {"min_grid_step": 0.5, "min_order_size": 1.0},
        "LTC": {"min_grid_step": 0.4, "min_order_size": 3.0},
    },
    "OKX": {
        "BTC": {"min_grid_step": 0.2, "min_order_size": 5.0},
        "ETH": {"min_grid_step": 0.25, "min_order_size": 5.0},
        "DOT": {"min_grid_step": 0.7, "min_order_size": 1.0},
        "LINK": {"min_grid_step": 0.5, "min_order_size": 2.0},
    },
    # --- –í–û–¢ –í–ê–®–ê –ù–û–í–ê–Ø –ë–ò–†–ñ–ê ---
    "BMEX": {
        "BTC": {"min_grid_step": 0.15, "min_order_size": 1.0},
        "ETH": {"min_grid_step": 0.20, "min_order_size": 1.0},
        "SOL": {"min_grid_step": 0.4, "min_order_size": 1.0},
    }
}

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–µ—Ç–æ—á–Ω–æ–π DCA-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    # --- –í—ã–±–æ—Ä –±–∏—Ä–∂–∏ (—Ç–µ–ø–µ—Ä—å —Å BMEX) ---
    exchange_selection = st.selectbox(
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É:",
        sorted(list(PRESETS.keys())) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏—Ä–∂–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    )

    available_coins = list(PRESETS[exchange_selection].keys())
    coin_selection = st.selectbox(
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É (–∏–ª–∏ '–†—É—á–Ω–æ–π'):",
        ['–†—É—á–Ω–æ–π'] + sorted(available_coins)
    )

    if coin_selection != '–†—É—á–Ω–æ–π':
        preset = PRESETS[exchange_selection][coin_selection]
        default_grid_step = preset["min_grid_step"]
        default_order_size = preset["min_order_size"]
        st.info(f"–î–ª—è {coin_selection} –Ω–∞ {exchange_selection} –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–∏–Ω. –∑–Ω–∞—á–µ–Ω–∏—è.")
    else:
        default_grid_step = 1.0
        default_order_size = 10.0

    initial_order_size = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", min_value=0.1, value=default_order_size, step=1.0)
    safety_order_size = st.number_input("–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä ($)", min_value=0.1, value=default_order_size, step=1.0)
    safety_orders_count = st.number_input("Max trigger number", min_value=1, value=20, step=1)
    price_step_percent = st.number_input("Grid step (%)", min_value=0.1, value=default_grid_step, step=0.1)
    price_step_multiplier = st.number_input("Grid step ratio (%)", min_value=0.1, value=1.5, step=0.1)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å (–∫–æ–¥ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∞ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if st.sidebar.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ç–∫—É"):
    # ... (–≤–µ—Å—å –∫–æ–¥ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –≤—ã–≤–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
    price_step = price_step_percent / 100.0
    order_sizes = [safety_order_size] * safety_orders_count
    price_deviations = []
    current_step = price_step
    for _ in range(safety_orders_count):
        price_deviations.append(current_step)
        current_step *= price_step_multiplier
    required_deposit = initial_order_size + sum(order_sizes)
    trading_range_sum = sum(price_deviations) * 100

    st.header("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"""
        <div style="border: 1px solid #262730; border-radius: 0.25rem; padding: 1rem;">
            <div style="font-size: 0.8rem; color: #808495;">–¢—Ä–µ–±—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç</div>
            <div style="font-size: 1.5rem; color: #28a745; font-weight: bold;">${required_deposit:,.2f}</div>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown(f"""
        <div style="border: 1px solid #262730; border-radius: 0.25rem; padding: 1rem;">
            <div style="font-size: 0.8rem; color: #808495;">–ò—Ç–æ–≥–æ–≤—ã–π Trading Range</div>
            <div style="font-size: 1.5rem; color: #28a745; font-weight: bold;">{trading_range_sum:,.2f}%</div>
        </div>
        """, unsafe_allow_html=True)

    st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤")
    order_data_list = []
    cumulative_volume = initial_order_size
    cumulative_range = 0.0
    for i in range(safety_orders_count):
        cumulative_volume += order_sizes[i]
        cumulative_range += price_deviations[i] * 100
        order_data_list.append({
            '‚Ññ –æ—Ä–¥–µ—Ä–∞': str(i + 1),
            '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': order_sizes[i],
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': price_deviations[i] * 100,
            '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': cumulative_volume,
            'Trading Range (%)': cumulative_range
        })
    order_data_list.insert(0, {
        '‚Ññ –æ—Ä–¥–µ—Ä–∞': '–ù–∞—á–∞–ª—å–Ω—ã–π',
        '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': initial_order_size,
        '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': 0.0,
        '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': initial_order_size,
        'Trading Range (%)': 0.0
    })
    full_grid_df = pd.DataFrame(order_data_list).set_index('‚Ññ –æ—Ä–¥–µ—Ä–∞')
    st.dataframe(full_grid_df.style.format({
        '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': '${:,.2f}',
        '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': '{:,.2f}%',
        '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': '${:,.2f}',
        'Trading Range (%)': '{:,.2f}%'
    }))

else:
    st.info("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –∏ –º–æ–Ω–µ—Ç—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ç–∫—É'.")