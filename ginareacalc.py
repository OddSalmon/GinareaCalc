import streamlit as st
import pandas as pd
import numpy as np

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(layout="wide", initial_sidebar_state="expanded")
st.title("üßÆ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä DCA-—Å–µ—Ç–∫–∏")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
with st.sidebar:
    st.header("Grid settings (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏)")
    
    # --- –ë–ª–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ---
    initial_order_size = st.number_input("Initial order size (–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä, $)", min_value=0.1, value=10.0)
    safety_order_size = st.number_input("Safety order size (–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä, $)", min_value=0.1, value=10.0)
    volume_multiplier = st.number_input("Volume multiplier (–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—É–º–º—ã)", min_value=1.0, value=1.0, format="%.2f")
    safety_orders_count = st.number_input("Max safety orders count (–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –°–û)", min_value=1, max_value=100, value=20)
    price_step_percent = st.number_input("Price deviation (–®–∞–≥ —Ü–µ–Ω—ã, %)", min_value=0.01, value=2.0, format="%.2f")
    price_step_multiplier = st.number_input("Safety order step multiplier (–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–∞ —Ü–µ–Ω—ã)", min_value=1.0, value=1.5, format="%.2f")
    take_profit_percent = st.number_input("Take profit (% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞)", min_value=0.01, value=2.0, format="%.2f")
    
    # --- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ ---
    run_calculation = st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ç–∫—É")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
if run_calculation:
    # –†–∞—Å—á–µ—Ç—ã
    order_sizes = [safety_order_size * (volume_multiplier ** i) for i in range(safety_orders_count)]
    price_steps = [price_step_percent * (price_step_multiplier ** i) for i in range(safety_orders_count)]
    required_deposit = initial_order_size + sum(order_sizes)
    theoretical_range = sum(price_steps)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.header("üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2 = st.columns(2)
    col1.metric("Required Deposit (–¢—Ä–µ–±—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç)", f"${required_deposit:,.2f}")
    col2.metric("Trading Range (–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω—ã)", f"{theoretical_range:.2f}%")

    st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–∫–∏")
    grid_data = []
    cumulative_volume = initial_order_size
    for i in range(safety_orders_count):
        cumulative_volume += order_sizes[i]
        grid_data.append({
            '‚Ññ –°–û': i + 1,
            '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': order_sizes[i],
            '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': price_steps[i],
            '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': cumulative_volume
        })

    initial_row = pd.DataFrame([{'‚Ññ –°–û': '–ù–∞—á–∞–ª—å–Ω—ã–π', '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': initial_order_size, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': 0.0, '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': initial_order_size}])
    grid_df = pd.concat([initial_row, pd.DataFrame(grid_data)], ignore_index=True).set_index('‚Ññ –°–û')

    st.dataframe(grid_df.style.format({
        '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': '${:,.2f}',
        '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': '{:,.2f}%',
        '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': '${:,.2f}'
    }))
else:
    st.info("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ç–∫—É', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
