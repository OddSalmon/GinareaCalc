import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(layout="wide")
st.title("üßÆ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä DCA-—Å–µ—Ç–∫–∏")

# --- –ü—Ä–µ—Å–µ—Ç—ã –º–æ–Ω–µ—Ç ---
COIN_PRESETS = {
    "BTC": {"min_grid_step": 0.2, "min_order_size": 10.0},
    "ETH": {"min_grid_step": 0.25, "min_order_size": 10.0},
    "BNB": {"min_grid_step": 0.3, "min_order_size": 5.0},
    "SOL": {"min_grid_step": 0.5, "min_order_size": 5.0},
    "XRP": {"min_grid_step": 0.5, "min_order_size": 2.0},
    "DOGE": {"min_grid_step": 1.0, "min_order_size": 1.0}
}

with st.sidebar:
    st.header("Grid settings (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏)")
    
    coin_selection = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:",
        ['–†—É—á–Ω–æ–π'] + sorted(list(COIN_PRESETS.keys()))
    )

    if coin_selection != '–†—É—á–Ω–æ–π':
        preset = COIN_PRESETS[coin_selection]
        default_grid_step = preset["min_grid_step"]
        default_order_size = preset["min_order_size"]
    else:
        default_grid_step = 1.0
        default_order_size = 10.0

    initial_order_size = st.number_input("Initial order size (–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä, $)", min_value=0.1, value=default_order_size)
    safety_order_size = st.number_input("Safety order size (–°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä, $)", min_value=0.1, value=default_order_size)
    volume_multiplier = st.number_input("Volume multiplier (–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—É–º–º—ã)", min_value=1.0, value=1.0, format="%.2f")
    safety_orders_count = st.number_input("Max safety orders count (–ú–∞–∫—Å. –∫–æ–ª-–≤–æ –°–û)", min_value=1, max_value=100, value=20)
    price_step_percent = st.number_input("Price deviation (–®–∞–≥ —Ü–µ–Ω—ã, %)", min_value=0.01, value=default_grid_step, format="%.2f")
    price_step_multiplier = st.number_input("Safety order step multiplier (–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–∞ —Ü–µ–Ω—ã)", min_value=1.0, value=1.5, format="%.2f")
    
    st.divider() # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
    st.header("Live Calculation (–ñ–∏–≤–æ–π —Ä–∞—Å—á–µ—Ç)")
    order_sizes_live = [safety_order_size * (volume_multiplier ** i) for i in range(safety_orders_count)]
    price_steps_live = [price_step_percent * (price_step_multiplier ** i) for i in range(safety_orders_count)]
    required_deposit_live = initial_order_size + sum(order_sizes_live)
    theoretical_range_live = sum(price_steps_live)
    
    st.metric("Required Deposit (–¢—Ä–µ–±—É–µ–º—ã–π –¥–µ–ø–æ–∑–∏—Ç)", f"${required_deposit_live:,.2f}")
    st.metric("Trading Range (–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω—ã)", f"{theoretical_range_live:.2f}%")


st.header("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–∫–∏")
grid_data = []
cumulative_volume = initial_order_size
for i in range(safety_orders_count):
    cumulative_volume += order_sizes_live[i]
    grid_data.append({
        '‚Ññ –°–û': i + 1,
        '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': order_sizes_live[i],
        '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': price_steps_live[i],
        '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': cumulative_volume
    })

initial_row = pd.DataFrame([{'‚Ññ –°–û': '–ù–∞—á–∞–ª—å–Ω—ã–π', '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': initial_order_size, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': 0.0, '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': initial_order_size}])
grid_df = pd.concat([initial_row, pd.DataFrame(grid_data)], ignore_index=True).set_index('‚Ññ –°–û')

st.dataframe(grid_df.style.format({
    '–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ ($)': '${:,.2f}',
    '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (%)': '{:,.2f}%',
    '–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ($)': '${:,.2f}'
}))
